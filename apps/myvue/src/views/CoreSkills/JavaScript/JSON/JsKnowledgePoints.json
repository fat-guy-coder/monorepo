[
  {
    "name": "基础概念",
    "items": [
      {
        "name": "变量声明",
        "description": "var, let, const的区别与使用场景",
        "importance": 5,
        "tags": ["作用域", "提升"]
      },
      {
        "name": "数据类型",
        "description": "7种原始类型和对象类型，类型检测方法",
        "importance": 5,
        "tags": ["typeof", "instanceof"]
      },
      {
        "name": "类型转换",
        "description": "显式/隐式类型转换规则和常见陷阱",
        "importance": 5,
        "tags": ["强制转换", "相等比较"]
      },
      {
        "name": "作用域",
        "description": "词法作用域、函数作用域和块级作用域",
        "importance": 5,
        "tags": ["闭包", "作用域链"]
      },
      {
        "name": "闭包",
        "description": "函数与其词法环境的引用捆绑",
        "importance": 5,
        "tags": ["私有变量", "记忆化"]
      },
      {
        "name": "原型链",
        "description": "对象之间通过原型继承属性和方法的机制",
        "importance": 5,
        "tags": ["__proto__", "prototype"]
      },
      {
        "name": "this关键字",
        "description": "函数执行上下文中的this绑定规则",
        "importance": 5,
        "tags": ["绑定规则", "箭头函数"]
      },
      {
        "name": "事件循环",
        "description": "JS单线程执行模型和异步处理机制",
        "importance": 5,
        "tags": ["宏任务", "微任务"]
      },
      {
        "name": "严格模式",
        "description": "限制不安全操作，启用更严格的解析",
        "importance": 4,
        "tags": ["'use strict'", "错误检测"]
      },
      {
        "name": "执行上下文",
        "description": "代码执行时的环境信息存储结构",
        "importance": 4,
        "tags": ["变量对象", "活动对象"]
      },
      {
        "name": "内存管理",
        "description": "内存分配、使用和回收机制",
        "importance": 4,
        "tags": ["垃圾回收", "内存泄漏"]
      },
      {
        "name": "模块系统",
        "description": "ES6模块的导入导出机制",
        "importance": 4,
        "tags": ["import", "export"]
      },
      {
        "name": "运算符",
        "description": "算术、比较、逻辑、位运算符及其优先级",
        "importance": 4,
        "tags": ["运算符", "优先级"]
      },
      {
        "name": "对象",
        "description": "对象的创建、属性访问、遍历和扩展",
        "importance": 5,
        "tags": ["Object", "属性"]
      },
      {
        "name": "数组",
        "description": "数组的基本操作、遍历方法和常用API",
        "importance": 5,
        "tags": ["Array", "遍历"]
      },
      {
        "name": "JSON",
        "description": "JSON的解析与序列化，常见用法和注意事项",
        "importance": 4,
        "tags": ["JSON.parse", "JSON.stringify"]
      },
      {
        "name": "错误处理",
        "description": "try/catch/finally语句和Error对象",
        "importance": 4,
        "tags": ["异常", "错误捕获"]
      },
      {
        "name": "定时器",
        "description": "setTimeout和setInterval的用法与区别",
        "importance": 3,
        "tags": ["异步", "定时"]
      },
      {
        "name": "全局对象",
        "description": "window、globalThis等全局对象的作用",
        "importance": 3,
        "tags": ["全局", "环境"]
      },
      {
        "name": "隐式全局变量",
        "description": "未声明直接赋值导致的隐式全局变量问题",
        "importance": 3,
        "tags": ["全局污染", "变量声明"]
      },
      {
        "name": "立即执行函数（IIFE）",
        "description": "函数定义后立即执行的写法及其作用",
        "importance": 3,
        "tags": ["作用域隔离", "IIFE"]
      }
    ]
  },
  {
    "name": "函数相关",
    "items": [
      {
        "name": "函数声明",
        "description": "函数定义的不同方式及区别",
        "importance": 5,
        "tags": ["函数表达式", "箭头函数"]
      },
      {
        "name": "高阶函数",
        "description": "接收函数作为参数或返回函数的函数",
        "importance": 5,
        "tags": ["回调", "函数组合"]
      },
      {
        "name": "箭头函数",
        "description": "简洁语法和词法this绑定",
        "importance": 5,
        "tags": ["=>", "this绑定"]
      },
      {
        "name": "回调函数",
        "description": "作为参数传递给另一个函数的函数",
        "importance": 5,
        "tags": ["异步", "事件处理"]
      },
      {
        "name": "IIFE",
        "description": "立即调用函数表达式",
        "importance": 4,
        "tags": ["模块模式", "作用域隔离"]
      },
      {
        "name": "纯函数",
        "description": "无副作用且相同输入总是返回相同输出",
        "importance": 4,
        "tags": ["函数式", "可预测"]
      },
      {
        "name": "柯里化",
        "description": "将多参数函数转换为一系列单参数函数",
        "importance": 4,
        "tags": ["部分应用", "函数组合"]
      },
      {
        "name": "函数组合",
        "description": "将多个函数组合成新函数的技术",
        "importance": 4,
        "tags": ["pipe", "compose"]
      },
      {
        "name": "递归",
        "description": "函数调用自身来解决问题的方法",
        "importance": 4,
        "tags": ["基线条件", "栈溢出"]
      },
      {
        "name": "尾调用优化",
        "description": "避免额外栈帧的递归优化技术",
        "importance": 3,
        "tags": ["TCO", "递归优化"]
      }
    ]
  },
  {
    "name": "对象与原型",
    "items": [
      {
        "name": "对象创建",
        "description": "多种对象创建方式及适用场景",
        "importance": 5,
        "tags": ["字面量", "构造函数", "Object.create"]
      },
      {
        "name": "属性描述符",
        "description": "控制对象属性的特性配置",
        "importance": 5,
        "tags": ["getter", "setter", "可枚举"]
      },
      {
        "name": "原型继承",
        "description": "基于原型的对象继承机制",
        "importance": 5,
        "tags": ["prototype", "__proto__"]
      },
      {
        "name": "类语法",
        "description": "ES6提供的基于类的语法糖",
        "importance": 5,
        "tags": ["class", "extends", "super"]
      },
      {
        "name": "Object方法",
        "description": "Object静态方法的使用",
        "importance": 5,
        "tags": ["keys", "values", "entries", "assign"]
      },
      {
        "name": "深拷贝",
        "description": "创建对象的完全独立副本",
        "importance": 5,
        "tags": ["递归", "结构化克隆"]
      },
      {
        "name": "原型污染",
        "description": "修改原型导致的安全问题",
        "importance": 4,
        "tags": ["安全", "预防"]
      },
      {
        "name": "属性代理",
        "description": "使用Proxy拦截对象操作",
        "importance": 4,
        "tags": ["拦截器", "元编程"]
      },
      {
        "name": "反射API",
        "description": "Reflect对象提供的元编程方法",
        "importance": 4,
        "tags": ["Reflect", "元编程"]
      },
      {
        "name": "Symbol类型",
        "description": "创建唯一标识符，用于对象属性",
        "importance": 4,
        "tags": ["唯一性", "内置Symbol"]
      }
    ]
  },
  {
    "name": "异步编程",
    "items": [
      {
        "name": "Promise",
        "description": "处理异步操作的对象",
        "importance": 5,
        "tags": ["then", "catch", "finally"]
      },
      {
        "name": "async/await",
        "description": "基于Promise的异步语法糖",
        "importance": 5,
        "tags": ["异步", "同步风格"]
      },
      {
        "name": "事件循环",
        "description": "JS执行异步代码的机制",
        "importance": 5,
        "tags": ["宏任务", "微任务"]
      },
      {
        "name": "回调地狱",
        "description": "多层嵌套回调导致的代码可读性问题",
        "importance": 4,
        "tags": ["金字塔", "解决方案"]
      },
      {
        "name": "生成器",
        "description": "可暂停和恢复的函数",
        "importance": 4,
        "tags": ["function*", "yield"]
      },
      {
        "name": "异步迭代",
        "description": "for await...of处理异步可迭代对象",
        "importance": 4,
        "tags": ["异步迭代器", "Symbol.asyncIterator"]
      },
      {
        "name": "Web Workers",
        "description": "在后台线程运行脚本",
        "importance": 4,
        "tags": ["多线程", "并行"]
      },
      {
        "name": "事件发射器",
        "description": "实现发布-订阅模式的对象",
        "importance": 4,
        "tags": ["EventEmitter", "观察者模式"]
      },
      {
        "name": "AbortController",
        "description": "中止一个或多个Web请求",
        "importance": 4,
        "tags": ["取消请求", "fetch"]
      },
      {
        "name": "微任务与宏任务",
        "description": "区分和理解微任务（microtask）与宏任务（macrotask）的执行顺序",
        "importance": 4,
        "tags": ["event loop", "Promise", "setTimeout"]
      },
      {
        "name": "setTimeout与setInterval",
        "description": "定时器的异步执行机制与常见陷阱",
        "importance": 4,
        "tags": ["定时器", "异步"]
      },
      {
        "name": "fetch API",
        "description": "用于网络请求的现代异步API，基于Promise",
        "importance": 4,
        "tags": ["网络请求", "Promise", "异步"]
      },
      {
        "name": "XMLHttpRequest",
        "description": "早期用于异步网络请求的API",
        "importance": 3,
        "tags": ["AJAX", "异步", "网络请求"]
      },
      {
        "name": "Promise.all",
        "description": "并行执行多个Promise，全部完成后返回结果",
        "importance": 4,
        "tags": ["并发", "Promise", "聚合"]
      },
      {
        "name": "Promise.race",
        "description": "并行执行多个Promise，最先完成的结果返回",
        "importance": 3,
        "tags": ["并发", "Promise", "竞速"]
      },
      {
        "name": "Promise.allSettled",
        "description": "等待所有Promise完成（无论成功或失败）后返回每个结果",
        "importance": 3,
        "tags": ["并发", "Promise", "结果收集"]
      },
      {
        "name": "Promise.any",
        "description": "只要有一个Promise成功就返回其结果",
        "importance": 3,
        "tags": ["并发", "Promise", "成功优先"]
      },
      {
        "name": "队列微任务（queueMicrotask）",
        "description": "手动将任务加入微任务队列，优先于宏任务执行",
        "importance": 3,
        "tags": ["微任务", "异步", "event loop"]
      },
      {
        "name": "requestAnimationFrame",
        "description": "浏览器动画帧回调，适合高性能动画",
        "importance": 3,
        "tags": ["动画", "异步", "性能"]
      },
      {
        "name": "MessageChannel",
        "description": "用于多线程或不同上下文之间的异步消息通信",
        "importance": 3,
        "tags": ["消息传递", "并发", "异步"]
      },
      {
        "name": "Service Worker",
        "description": "拦截网络请求，实现离线缓存和推送等功能的浏览器后台线程",
        "importance": 3,
        "tags": ["PWA", "缓存", "离线", "异步"]
      }
    ]
  },
  {
    "name": "数组操作",
    "items": [
      {
        "name": "数组方法",
        "description": "map, filter, reduce等高阶函数",
        "importance": 5,
        "tags": ["遍历", "转换"]
      },
      {
        "name": "数组解构",
        "description": "从数组提取值赋给变量",
        "importance": 5,
        "tags": ["...rest", "默认值"]
      },
      {
        "name": "类数组转换",
        "description": "将类数组对象转换为真实数组",
        "importance": 4,
        "tags": ["Array.from", "arguments"]
      },
      {
        "name": "数组去重",
        "description": "多种数组去重的方法",
        "importance": 4,
        "tags": ["Set", "filter", "reduce"]
      },
      {
        "name": "数组扁平化",
        "description": "将多维数组转换为一维数组",
        "importance": 4,
        "tags": ["flat", "递归"]
      },
      {
        "name": "数组排序",
        "description": "sort方法的使用和自定义排序",
        "importance": 4,
        "tags": ["比较函数", "稳定性"]
      },
      {
        "name": "类型化数组",
        "description": "处理二进制数据的数组视图",
        "importance": 3,
        "tags": ["ArrayBuffer", "DataView"]
      }
    ]
  },
  {
    "name": "ES6+特性",
    "items": [
      {
        "name": "解构赋值",
        "description": "从数组/对象中提取值",
        "importance": 5,
        "tags": ["对象解构", "数组解构"]
      },
      {
        "name": "模板字符串",
        "description": "使用反引号定义的多行字符串",
        "importance": 5,
        "tags": ["插值", "标签模板"]
      },
      {
        "name": "扩展运算符",
        "description": "展开数组或对象",
        "importance": 5,
        "tags": ["...", "函数参数"]
      },
      {
        "name": "默认参数",
        "description": "函数参数的默认值设置",
        "importance": 5,
        "tags": ["默认值", "解构"]
      },
      {
        "name": "剩余参数",
        "description": "将剩余参数收集到数组中",
        "importance": 5,
        "tags": ["...rest", "arguments"]
      },
      {
        "name": "可选链",
        "description": "安全访问嵌套对象属性",
        "importance": 5,
        "tags": ["?.", "空值安全"]
      },
      {
        "name": "空值合并",
        "description": "提供默认值的逻辑运算符",
        "importance": 5,
        "tags": ["??", "默认值"]
      },
      {
        "name": "BigInt",
        "description": "表示任意精度的整数",
        "importance": 4,
        "tags": ["大整数", "精度"]
      },
      {
        "name": "全局This",
        "description": "标准化全局对象引用",
        "importance": 4,
        "tags": ["globalThis", "跨环境"]
      },
      {
        "name": "动态导入",
        "description": "运行时按需加载模块",
        "importance": 4,
        "tags": ["import()", "代码分割"]
      }
    ]
  },
  {
    "name": "错误处理",
    "items": [
      {
        "name": "try/catch/finally",
        "description": "捕获和处理运行时错误",
        "importance": 5,
        "tags": ["错误捕获", "清理"]
      },
      {
        "name": "Error对象",
        "description": "表示错误的标准对象",
        "importance": 5,
        "tags": ["类型", "堆栈跟踪"]
      },
      {
        "name": "自定义错误",
        "description": "扩展Error创建特定错误类型",
        "importance": 4,
        "tags": ["继承", "Error"]
      },
      {
        "name": "Promise错误处理",
        "description": "使用catch处理Promise拒绝",
        "importance": 5,
        "tags": ["拒绝", "未处理拒绝"]
      },
      {
        "name": "全局错误处理",
        "description": "window.onerror捕获未处理错误",
        "importance": 4,
        "tags": ["全局", "错误报告"]
      }
    ]
  },
  {
    "name": "设计模式",
    "items": [
      {
        "name": "模块模式",
        "description": "封装私有变量和公共API",
        "importance": 5,
        "tags": ["IIFE", "闭包"]
      },
      {
        "name": "单例模式",
        "description": "确保类只有一个实例",
        "importance": 5,
        "tags": ["全局访问", "实例控制"]
      },
      {
        "name": "工厂模式",
        "description": "创建对象而不指定具体类",
        "importance": 5,
        "tags": ["对象创建", "解耦"]
      },
      {
        "name": "观察者模式",
        "description": "对象间的一对多依赖关系",
        "importance": 5,
        "tags": ["发布-订阅", "事件驱动"]
      },
      {
        "name": "代理模式",
        "description": "为对象提供代理以控制访问",
        "importance": 4,
        "tags": ["Proxy", "访问控制"]
      },
      {
        "name": "装饰器模式",
        "description": "动态添加对象功能",
        "importance": 4,
        "tags": ["装饰器", "功能扩展"]
      },
      {
        "name": "策略模式",
        "description": "封装可互换的算法",
        "importance": 4,
        "tags": ["算法封装", "运行时选择"]
      },
      {
        "name": "迭代器模式",
        "description": "顺序访问聚合对象的元素",
        "importance": 4,
        "tags": ["Symbol.iterator", "for...of"]
      }
    ]
  },
  {
    "name": "Web API",
    "items": [
      {
        "name": "DOM操作",
        "description": "访问和操作文档对象模型",
        "importance": 5,
        "tags": ["选择器", "节点操作"]
      },
      {
        "name": "事件处理",
        "description": "处理用户交互和浏览器事件",
        "importance": 5,
        "tags": ["addEventListener", "事件委托"]
      },
      {
        "name": "Fetch API",
        "description": "现代网络请求接口",
        "importance": 5,
        "tags": ["Promise", "HTTP"]
      },
      {
        "name": "Web Storage",
        "description": "本地存储数据",
        "importance": 5,
        "tags": ["localStorage", "sessionStorage"]
      },
      {
        "name": "定时器",
        "description": "延迟执行和周期性执行",
        "importance": 5,
        "tags": ["setTimeout", "setInterval"]
      },
      {
        "name": "URL API",
        "description": "解析和操作URL",
        "importance": 4,
        "tags": ["URL", "URLSearchParams"]
      },
      {
        "name": "History API",
        "description": "操作浏览器会话历史",
        "importance": 4,
        "tags": ["pushState", "单页应用"]
      },
      {
        "name": "WebSockets",
        "description": "全双工客户端-服务器通信",
        "importance": 4,
        "tags": ["实时", "双向通信"]
      },
      {
        "name": "Web Components",
        "description": "创建可重用自定义元素",
        "importance": 4,
        "tags": ["Custom Elements", "Shadow DOM"]
      }
    ]
  },
  {
    "name": "性能优化",
    "items": [
      {
        "name": "防抖",
        "description": "事件停止触发后执行",
        "importance": 5,
        "tags": ["resize", "输入"]
      },
      {
        "name": "节流",
        "description": "固定时间间隔内只执行一次",
        "importance": 5,
        "tags": ["scroll", "高频事件"]
      },
      {
        "name": "懒加载",
        "description": "延迟加载非关键资源",
        "importance": 5,
        "tags": ["图片", "组件"]
      },
      {
        "name": "虚拟滚动",
        "description": "只渲染可见区域内容",
        "importance": 4,
        "tags": ["大数据", "列表"]
      },
      {
        "name": "内存优化",
        "description": "减少内存占用和泄漏",
        "importance": 5,
        "tags": ["引用", "垃圾回收"]
      },
      {
        "name": "代码分割",
        "description": "将代码拆分成小块按需加载",
        "importance": 5,
        "tags": ["动态导入", "懒加载"]
      },
      {
        "name": "Web Workers",
        "description": "后台线程执行CPU密集型任务",
        "importance": 4,
        "tags": ["并行", "非阻塞"]
      }
    ]
  }
]
